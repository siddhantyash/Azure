# azure-pipelines.yml

# Trigger the pipeline on every push to the main branch
trigger:
  branches:
    include:
      - main

# Define the agent pool where your pipeline jobs will run
pool:
  vmImage: 'ubuntu-latest' # Ubuntu is generally preferred for Java builds

# Define variables for reusability and easy configuration
variables:
  javaVersion: '17' # The Java version to use
  mavenVersion: '3.5.0' # The Maven version to use

# Define a single stage for building and testing
stages:
- stage: BuildAndTest
  displayName: 'Build and Run All Tests'
  jobs:
  - job: BuildAndTestJob
    displayName: 'Build and Test Application'
    steps:
    - checkout: self # Checkout the source code from your repository

    # --- Install Java Development Kit ---
    - task: JavaToolInstaller@0
      displayName: 'Install Java JDK $(javaVersion)'
      inputs:
        versionSpec: $(javaVersion)
        jdkArchitectureOption: 'x64'
        jdkSourceOption: 'PreInstalled'
        cleanDestinationDirectory: true

    # --- Install Maven ---
    - task: Maven@4
      displayName: 'Install Maven $(mavenVersion)'
      inputs:
        mavenVersionSpec: $(mavenVersion)
        mavenSourceOption: 'ToolInstaller'
        mavenFeed: 'public'

    # --- Maven Build and Run All Tests (Unit and In-Memory Integration) ---
    # The 'clean install' goal will:
    # 1. Clean the target directory.
    # 2. Compile source and test code.
    # 3. Run unit tests (via surefire plugin).
    # 4. Package the application (JAR).
    # 5. Run integration tests (via failsafe plugin, after packaging).
    - task: Maven@4
      displayName: 'Maven Build and Run All Tests'
      inputs:
        mavenPomFile: '/product/pom.xml' # Path to your main pom.xml
        goals: 'clean install' # This goal covers build, package, and runs both unit and integration tests
        options: '-Dmaven.test.skip=false' # Ensures tests are not skipped
        publishJUnitResults: false # We will use PublishTestResults task explicitly for more control

    # --- Publish Unit Test Results ---
    # This task reads the XML reports generated by Surefire (unit tests)
    - task: PublishTestResults@2
      displayName: 'Publish Unit Test Results to Azure DevOps'
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/surefire-reports/TEST-*.xml' # Path to Surefire test reports
        mergeTestResults: true
        failTaskOnFailedTests: true # Fail the pipeline if any unit tests fail
        testRunTitle: 'MyProductApp Unit Tests'

    # --- Publish Integration Test Results ---
    # This task reads the XML reports generated by Failsafe (in-memory integration tests)
    - task: PublishTestResults@2
      displayName: 'Publish Integration Test Results to Azure DevOps'
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/failsafe-reports/TEST-*.xml' # Path to Failsafe test reports
        mergeTestResults: true
        failTaskOnFailedTests: true # Fail the pipeline if any integration tests fail
        testRunTitle: 'MyProductApp In-Memory Integration Tests'

    # --- Optional: Publish Application Artifact (JAR) ---
    # If you still want to produce the JAR as an artifact for manual deployment later.
    - task: CopyFiles@2
      displayName: 'Copy JAR for Artifact'
      inputs:
        contents: '**/*.jar'
        targetFolder: '$(Build.ArtifactStagingDirectory)'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Build Artifacts (JAR)'
      inputs:
        pathToPublish: '$(Build.ArtifactStagingDirectory)'
        artifactName: 'drop'
