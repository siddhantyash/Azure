stages:
- stage: BuildAndTest
  displayName: 'Build and Run All Tests'
  jobs:
  - job: BuildAndTestJob
    displayName: 'Build and Test Application'
    steps:
    - checkout: self

    - script: |
        echo "--- Listing files in the pipeline agent's working directory ---"
        ls -R $(System.DefaultWorkingDirectory)
        echo "--- End of file list ---"
      displayName: 'DEBUG: List Repository Files'

    # --- Your existing Maven tasks will follow here ---
   - task: JavaToolInstaller@0
      displayName: 'Install Java JDK $(javaVersion)'
      inputs:
        versionSpec: $(javaVersion) # This will typically be '17' as per our example
        jdkArchitectureOption: 'x64'
        # --- CHANGE THIS LINE ---
        jdkSourceOption: 'ToolInstaller' # This tells Azure DevOps to download/install if needed
        # --- END CHANGE ---
        cleanDestinationDirectory: true # Cleans the target directory before installation

    - task: Maven@4
      displayName: 'Install Maven $(mavenVersion)'
      inputs:
        mavenVersionSpec: $(mavenVersion)
        mavenSourceOption: 'ToolInstaller'
        mavenFeed: 'public'

    - task: Maven@4
      displayName: 'Maven Build and Run All Tests'
      inputs:
        mavenPomFile: '/product/pom.xml' # We will correct this after checking debug output
        goals: 'clean install'
        options: '-Dmaven.test.skip=false'
        publishJUnitResults: false

    - task: PublishTestResults@2
      displayName: 'Publish Unit Test Results to Azure DevOps'
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/surefire-reports/TEST-*.xml'
        mergeTestResults: true
        failTaskOnFailedTests: true
        testRunTitle: 'MyProductApp Unit Tests'

    - task: PublishTestResults@2
      displayName: 'Publish Integration Test Results to Azure DevOps'
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/failsafe-reports/TEST-*.xml'
        mergeTestResults: true
        failTaskOnFailedTests: true
        testRunTitle: 'MyProductApp In-Memory Integration Tests'

    - task: CopyFiles@2
      displayName: 'Copy JAR for Artifact'
      inputs:
        contents: '**/*.jar'
        targetFolder: '$(Build.ArtifactStagingDirectory)'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Build Artifacts (JAR)'
      inputs:
        pathToPublish: '$(Build.ArtifactStagingDirectory)'
        artifactName: 'drop'
